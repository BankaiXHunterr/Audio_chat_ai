[{"text":"Hey there everyone. My name is and I make coding videos. But this video is all about DevOps. So there are a lot of roadmaps of the DevOps which are available and which talks about freshers. This is not that video. This video is designed for all those engineers who have been working for at least two years in their company or maybe as a freelancer. The goal is that you have been writing code or at least in touch with some format of the code for at least two years. Now, how can you migrate from a role of a developer or an engineer to a DevOps engineer? This is exactly that.","speaker":"Unknown","timestamp":""},{"text":"I feel sometimes that a lot of people talk about the beginners, but nobody talks about those people who want to switch to the next job or migrate to the next job. So hence this video. This video is exactly designed for that. And no there will be no vague things. I will also be comparing how much you know already and you should not be spending much more time on this particular topic. These are just five things that you need to focus on and yes, this is going to take some time. You are already very mature. You don't need to get motivated just like the beginners or the freshers. You know the things that things do take time and they have their own learning curve.","speaker":"Unknown","timestamp":""},{"text":"After that in the very end section after the five or six points at the very end of the section I'll give you the exact projects that you need to make to get the hands on with this and there will be no big deal for you at at all. I hope this is all good context for you to understand this video what this video is all about. So leave in the comment section that make more videos for the people who are already working in the industry. I will surely make that and if you have any idea just let me know in the comments. I will make that.","speaker":"Unknown","timestamp":""},{"text":"So let me take you onto the screen itself and this is the DevOps roadmap and I've explicitly mentioned not for freshers. Although freshers can still watch it that how people actually move from one job role to another and in the very first situation itself I will walk you through that why am I calling this as a not a fresher job role. So DevOps is something where you manage the development and operations and you have already seen these kinds of roles in your companies that whatever the developer builds that need to be pushed to the production. But this is not just all about it. It not always get pushed to the production. There are in between environments like testing environment, development environment, so much more that comes in between.","speaker":"Unknown","timestamp":""},{"text":"And since you've already seen that ecosystem now let me walk you through that how you can start with that. Now the journey is not different for fresher or for the experience one as well, but there are some things which you can totally totally and ignore. The first thing is foundation first. Nothing starts without the foundation whether that's programming or DevOps. So in the foundation you are going to see there are Linux basics, there are networking basics and there are Git and Git workflows. Now if you have been writing code for two years, I think this is already done. You don't need to do anything at all.","speaker":"Unknown","timestamp":""},{"text":"Now yes, you can get into the trap of finding more basics on the Linux. You can get in the trap of finding more about networking concept or maybe I want to see what is extraordinarily there to explore in the Git. Please don't do that. You are going to just waste your own time as well. This whole thing if anybody who has been writing code for at least even one year, you know already what is there and rest you can learn on the go as well. So your foundation is already done. You don't need to spend any more time with this and this is exactly where this roadmap is different. I tell you what not to do. I will tell you what to do, but I'll tell you specifically what not to do where you can save your time.","speaker":"Unknown","timestamp":""},{"text":"I hope you are loving that. Let me know in the comment section as well. Now what's the second step? Now rather to the contrary belief that programming is not required in the DevOps and yes, I do have my friends as well who have zero idea of the programming. By zero idea I mean to say they can't write a full-fledged application. They know the basics enough. They are not afraid of programming. If you give them loops and functions and all of them through the help of LLMs and chat GPT, they can understand what's happening.","speaker":"Unknown","timestamp":""},{"text":"But I would say that if you have been writing code or at least have been in touch of these kinds of things, that is all you need. I know people who work at Fang level and just understand the basics of programming. That's it. They have never built a full-fledged application at least not in the recent year and they are doing fine. So in this sense, what the programming will help you to achieve is first of all the automation. There are automations like Ansible, there are automations like sometimes you have to run the application in your system whether it's Java, Golang or JS, whatever the application is.","speaker":"Unknown","timestamp":""},{"text":"Having the basics of why the environment files are there or there's ENV file, all these things will help you, but you don't need too much of information in that. Another thing that you will be using quite a lot is infrastructure as a code. A lot of organization these days are keeping their whole infrastructure in just the code files so that they can quickly spin up the whole infrastructure for development or even for production in the new cloud environment. This is where your programming skills comes up. If you want to learn one or have to pick only one, I highly recommend to choose Python. I do have a Udemy course on Python as well, but that's totally okay if you want to learn from other resources, but this will help you a lot.","speaker":"Unknown","timestamp":""},{"text":"Now moving on to next and by the way, if you are already working and decent, you don't need to explore this too much. Just learn a little bit about the infrastructure as a code, probably spend a week or two week with that and that's it. You don't need to spend any more time in that. Okay, this is the next step which is where the fun begins. The operating system and the containers. Now if you know basics and decent amount of Linux, how the shell works, how to load a shell, how to reload a shell with the fresh environment or maybe directory traversing, how to install a server, engine X something, that is it. That is all the OS knowledge you should have and you can navigate the things. You have already navigated a lot of things in the corporate, so you don't need to worry too much on that.","speaker":"Unknown","timestamp":""},{"text":"The things where it gets interested for you is the Docker basic and it would be better not to call it as Docker, but actually call this one as container basics. I think uh this would make much more sense uh get the container basics. Now the most famous container is of course Docker, but there are others as well. The foundation of all the containers is relatively same. Only handful of things do differ. So focus a lot on the container basics. Now this Kubernetes, this is a beast of the tech in itself and not everybody needs Kubernetes. The scale of technology or the company who uses Kubernetes is really really high.","speaker":"Unknown","timestamp":""},{"text":"If you learn that surely this is going to give you an extra advantage, but you don't need to go through with this in the very first go because everybody learns in the iteration phase. One time you go just with the basics, then you go with that. So in the very first iteration, I don't think you need that much of Kubernetes basics, but if you have that surely extra advantage. If you know just the basics of it, that's better even. But try to get don't get into this. This one takes a lot of time and you are looking forward to switch as quickly as possible. So this Kubernetes can actually slow up your speed a lot. So giving you a practical advice, take this onto the second go and you will learn much more about it once you actually switch in the DevOps role. So get the basics up and running and get the foundation of Docker basics first and then if you have more time, then go only for the Kubernetes. So that's my take on this.","speaker":"Unknown","timestamp":""},{"text":"Now here is another interesting part of this cloud platform. So should I learn AWS, should I learn GCP or Azure? Doesn't really matter. So if you are working with the DevOps engineer, you will be handling one or the other cloud. So what I really want to focus is focus on the core services of the application itself. So what are the core services? The core services in any given cloud is first of all compute. Some call them EC2, some call them instances, whatever they call them.","speaker":"Unknown","timestamp":""},{"text":"Some uh you also need to focus on understanding the storage in the cloud because storage in your OS and storage in the cloud are two different things. Their working style is different. The networking very important for a DevOps engineer, he really need to understand the VPC and I highly recommend to start with AWS VPC because that is where you do a lot of complex stuff and that knowledge is transferable in GCP and Azure as well. And then identity management. The Windows side of identity management like Azure, it's whole different beast and AWS side is a whole different beast. GCP also follows a little bit of the AWS side as well, but this is something where you should spend good amount of time.","speaker":"Unknown","timestamp":""},{"text":"So this is the thing which is going to be kind of a make or break for you. Spend more time on it and don't look them as AWS or Azure perspective. Just look at them as the core service perspective. Every cloud provider thrives on these fundamentals, core infrastructure services only. This is where they make their money. Compute, storage, networking and IM. That is all you need to master. If you have time go for certifications that are really uh kind of valuable in the DevOps environment. Yes, there is still a huge number of corporation that actually give value for uh Kubernetes exam. They give value for the AWS exam.","speaker":"Unknown","timestamp":""},{"text":"Although some people don't like it, they call it as salesman that you just learned the tech and becomes the salesman of that cloud. That is true up to certain extent, but I still think if corporate values that and you can have a chance of getting a job for that, go for it. Then this is the most important thing. Learn about the cost optimization and monitoring. A DevOps engineer is not somebody who just mindlessly put the application in the production or for the scaling issues. A real DevOps engineer is somebody who can actually sit with the CXO people and can talk about the cost optimization and monitoring strategies.","speaker":"Unknown","timestamp":""},{"text":"The CXO people are always worried about how much is it going to cost to us and a real DevOps engineer plays a vital role in figuring out that this shouldn't cost this much or this should not explode in the cost and monitoring as well. Every single time you should be aware of what's happening in the application when the traffic is spike spiking so that you can give those insight that doing this on the website or this kind of a sale actually generated more of the revenue. We should do this kind of activity more. And for the monitoring, I highly highly recommend that you do absolutely go in depth of monitoring and observability.","speaker":"Unknown","timestamp":""},{"text":"This is where a lot of people lag and especially people who are just beginners in the DevOps, they don't focus much on this because this is your gateway of moving into the next step. After DevOps you obviously will be here after like two three years that I want to do next. What is the next step for me? How can I move upgrade in life? This is the one thing which takes you onto the next level. As I mentioned, if you are monitoring the things, if you know exactly what sale is doing good, which kind of traffic is actually generating more revenue, you have all of this data. This is something that you should focus on.","speaker":"Unknown","timestamp":""},{"text":"So focus a lot on monitoring and observability and here are the things that you need to do. First of all, learn about the core metrics, CPU, memory, disk and network. These are the things which you should learn first to monitor. And yes, there are tools available which I'll mention here in itself. These are the things which you should keep an eye and there will be like probably hundreds of instances and in these instances, you can just look forward like how can I check the memories there and if the memory goes about certain threshold.","speaker":"Unknown","timestamp":""},{"text":"It's not just about spinning up a new machine. It's also about finding out what caused this spike. Is it just a spike because of the bad code or is it a spike because of the heavy traffic? These are the things which makes you an extraordinary DevOps engineer. So use services like ManageEngine, uh application manager for app and server monitoring. This can give you a clear picture whether this was because of the bad code or the traffic was extraordinary. And also use 24/7, they actually help you to understand the infrastructure availability monitoring. They also help you for cloud resource monitoring and this is my favorite part.","speaker":"Unknown","timestamp":""},{"text":"They actually allows you to incorporate resources from multiple clouds. These days people like resilience. So if any one cloud provider is down, they actually prefer to have other cloud provider being up or sometimes they use services from different cloud provider. Maybe some services are cheap from Azure and some of services are cheap from GCP. They try to use all of them. Now having monitoring by going into each panel is not feasible in that kind of a scale. So if you ask me in the DevOps perspective, the cloud resource monitoring for these three cloud is one of my favorite thing from the 24/7 by ManageEngine and their pricing is ridiculously low.","speaker":"Unknown","timestamp":""},{"text":"And also look for the application performance. There is APM for Java, Node.js, Python and almost all of them. They also integrate the alert reporting. This is the make and break for DevOps engineer. Usually nobody asked for the DevOps engineer. They are only being asked when things goes down and you don't want them to go down. You really need to understand that if something goes down, I need to be aware of the Slack messages, the email messages and the Teams whatever you are using for that perspective.","speaker":"Unknown","timestamp":""},{"text":"Let me show you a sample monitoring of how the application looks like in the monitoring dashboard. So this is where you will be spending majority of your time. If I just scroll this a little bit here so that we all can see. You can just go ahead and see there is so much of the monitoring that's happening. There's a web and if you look at the cloud itself and you can see we have all the cloud instances available up here. So there is AWS uh there is Azure. I hope you can see this. Can I zoom this? There's AWS, there's Azure, GCP, there is even Oracle. Hardly anybody talks about them. I should talk more about them.","speaker":"Unknown","timestamp":""},{"text":"So you can see all of the things actually happens up here. You can also monitor all the networking what's happening in your website. How is it happening? The network discovery from the DNS discovery to VoIP to the mail server. How is it doing? This is one of the key job. A lot of people think DevOps what they do actually, they all the time monitor the resources. This is where I do. And what I really like about them that that anybody can start for free. I have mentioned this many many time. I always go into the pricing and want to mention this uh that if you go and look for this they have this free forever plan which monitors up to five resources and if you check my link here, you get six month of unlimited access to whatever you want to do. This is a special tie up that I have done with them so that more of my learners can actually learn for free about these monitoring of the resources and they were kind enough to actually do this. So go ahead and check them out. Uh they are used by lot of lot of corporate. If you just go and look at this like who are their clients, you will be surprised to know. They actually mentioned this uh many many times.","speaker":"Unknown","timestamp":""},{"text":"So look at this GoDaddy, VMware, Groupon, Reliance, yes, Ford, SAP. It's not like 13,000 happy corporate customers. This is crazy. This is crazy. This is a proof that yes, this is actually getting deployed everywhere in the industry. Anyways, move on to the next part which is security in the DevOps. This is something which you should be worried about. You should talk about it, but this is a rabbit hole in itself. Security is always a rabbit hole. It's always a cat and mouse game. But the more you are aware of the things which can actually hack into your system, the better it is.","speaker":"Unknown","timestamp":""},{"text":"So also talk about this and what you can do is you can learn about the secure code scanning by SonarQube and Snyk. Uh you can also look about the secrets manager using uh HashiCorp Vault, AWS Secret Manager. There's so many of them, credentials manager. Identity and RBAC, role based access control. So these are the things which you will learn eventually. So these are the things. So this is the roadmap that you should follow. This is a very practical roadmap, not just like learn this, learn this. This is exactly what you need to do and this is enough to get migrated into the DevOps journey.","speaker":"Unknown","timestamp":""},{"text":"Now what kind of projects you should be building for hands on of this? I have a special recommendation for that. First of all, deploy a sample application with Docker and AWS EC2. This is the most common project that you should build and try to incorporate different sample tech products like some of the websites being built by uh Spring Boot, some by Node.js, some by Go. You don't need to understand those app. Just try to look in the community, ask, use my Twitter or my Discord. They can give you a simple to do application which has a full stack. So try to deploy that so that you can see that how the database is integrated within my network and stuff.","speaker":"Unknown","timestamp":""},{"text":"Once you are done with this, uh then go for the automation. So automate the infra by setting up Terraform or Ansible. Just Terraform is also good enough, but this is a good project. Also try to build CI CD pipelines with GitHub Actions and deploy to uh AWS. This is a project I believe everybody should have if you are calling yourself as a DevOps engineer. DevOps engineers are full of their GitHub with a lot of scripts and things which are there. A lot of GitHub's actions are also there with them. So snippet is kind of a superpower for all the DevOps engineer.","speaker":"Unknown","timestamp":""},{"text":"Now setup of the Kubernetes cluster and deploy a microservice app in case you are learning the DevOps the Kubernetes part as well. But again, no such hurry, no such big deal. That's okay. Now these are next one are hidden gems of the project that you can try. This is what makes you ordinary DevOps to extraordinary DevOps and this is where you actually integrate and manage 24/7 engine. First of all, app availability. Once your app is actually deployed, what's make what is making sure that this is up and running? Nobody knows. So this is where your app availability comes up, your cloud usage and different parameters on the cloud. Maybe CPU usage, maybe bandwidth usage and log alerts and create Grafana dashboard plus ManageEngine alerts for SRE style monitoring.","speaker":"Unknown","timestamp":""},{"text":"If these monitoring projects are there in your project or on your GitHub somewhere some reports or some articles are there, this is what makes you from a regular DevOps engineer to an extraordinary DevOps engineer. So I know the video was kind of a bit longer side, not that much long, but this has given you a real world idea of what and how to transform from a regular role of a developer to the DevOps role. But again, not friendly for the fresher, but a lot of notes can be picked up by the fresher as well. So this is it from my side. Hope you have enjoyed this kind of a roadmap for experienced folks as well. Let me know in the comment section what you want to see more and where would you like to get more guidance on that. I would love to provide you that. That is it for this video. Let's catch up in the next one.","speaker":"Unknown","timestamp":""}]